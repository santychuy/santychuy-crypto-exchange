/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface TokenSwapInterface extends ethers.utils.Interface {
  functions: {
    "buyTokens()": FunctionFragment;
    "santychuyToken()": FunctionFragment;
    "sellTokens(uint256)": FunctionFragment;
    "tokenPerEth()": FunctionFragment;
  };

  encodeFunctionData(functionFragment: "buyTokens", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "santychuyToken",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "sellTokens",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tokenPerEth",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "santychuyToken",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "sellTokens", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenPerEth",
    data: BytesLike
  ): Result;

  events: {
    "BuyTokens(address,uint256,uint256)": EventFragment;
    "SellTokens(address,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "BuyTokens"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "SellTokens"): EventFragment;
}

export type BuyTokensEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    buyer: string;
    amountETH: BigNumber;
    amountTokens: BigNumber;
  }
>;

export type SellTokensEvent = TypedEvent<
  [string, BigNumber, BigNumber] & {
    seller: string;
    amountTokens: BigNumber;
    amountETH: BigNumber;
  }
>;

export class TokenSwap extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: TokenSwapInterface;

  functions: {
    buyTokens(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    santychuyToken(overrides?: CallOverrides): Promise<[string]>;

    sellTokens(
      _tokenAmountToSell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tokenPerEth(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  buyTokens(
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  santychuyToken(overrides?: CallOverrides): Promise<string>;

  sellTokens(
    _tokenAmountToSell: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tokenPerEth(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    buyTokens(overrides?: CallOverrides): Promise<void>;

    santychuyToken(overrides?: CallOverrides): Promise<string>;

    sellTokens(
      _tokenAmountToSell: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tokenPerEth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    "BuyTokens(address,uint256,uint256)"(
      buyer?: null,
      amountETH?: null,
      amountTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; amountETH: BigNumber; amountTokens: BigNumber }
    >;

    BuyTokens(
      buyer?: null,
      amountETH?: null,
      amountTokens?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { buyer: string; amountETH: BigNumber; amountTokens: BigNumber }
    >;

    "SellTokens(address,uint256,uint256)"(
      seller?: null,
      amountTokens?: null,
      amountETH?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { seller: string; amountTokens: BigNumber; amountETH: BigNumber }
    >;

    SellTokens(
      seller?: null,
      amountTokens?: null,
      amountETH?: null
    ): TypedEventFilter<
      [string, BigNumber, BigNumber],
      { seller: string; amountTokens: BigNumber; amountETH: BigNumber }
    >;
  };

  estimateGas: {
    buyTokens(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    santychuyToken(overrides?: CallOverrides): Promise<BigNumber>;

    sellTokens(
      _tokenAmountToSell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tokenPerEth(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    buyTokens(
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    santychuyToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sellTokens(
      _tokenAmountToSell: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tokenPerEth(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
